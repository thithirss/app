services:
  mysql:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_DATABASE: travelrep
      MYSQL_USER: travel
      MYSQL_PASSWORD: travel123
      MYSQL_ROOT_PASSWORD: root123
    ports:
      - "3307:3306"  # altera se j√° tiver MySQL local
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: travelrep-app
    env_file:
      - ./backend/.env
    environment:
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
    volumes:
      - ./backend:/var/www/html
      - backend_vendor:/var/www/html/vendor
      - backend_storage:/var/www/html/storage
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: travelrep-nginx
    ports:
      - "8000:80"
    volumes:
      - ./backend:/var/www/html
      - ./backend/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog
    container_name: travelrep-mailhog
    ports:
      - "8025:8025"
    restart: unless-stopped

  queue:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: travelrep-queue
    command: sh -c "php artisan queue:work --sleep=3 --tries=3 --timeout=90"
    env_file:
      - ./backend/.env
    environment:
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
    volumes:
      - ./backend:/var/www/html
      - backend_vendor:/var/www/html/vendor
      - backend_storage:/var/www/html/storage
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    image: node:18-alpine
    container_name: travelrep-frontend
    working_dir: /app
    environment:
      CHOKIDAR_USEPOLLING: "true"
      API_URL: "http://nginx" # alvo do proxy dentro da rede do docker
    command: sh -c "npm ci && npx vue-cli-service serve --host 0.0.0.0 --port 8080"
    ports:
      - "8080:8080"
    volumes:
      - ./app:/app
    depends_on:
      - nginx
    restart: unless-stopped

volumes:
  mysql_data:
  backend_vendor:
  backend_storage: